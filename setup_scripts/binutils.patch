diff --git a/binutils/nm.c b/binutils/nm.c
index a8e915bc0b4..94aeadb31f5 100644
--- a/binutils/nm.c
+++ b/binutils/nm.c
@@ -1960,8 +1960,36 @@ just_print_symbol_name (struct extended_symbol_info *info, bfd *abfd)
   print_symname ("%s", info, NULL, abfd);
 }
 
-int
-main (int argc, char **argv)
+
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+  char filename[256];
+  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
+  FILE *fp = fopen(filename, "wb");
+  if (!fp) {
+    return 0;
+  }
+  fwrite(data, size, 1, fp);
+  fclose(fp);
+
+  // Globals
+  line_numbers = 1;
+  no_sort = 0;
+  sort_numerically = 1;
+  sort_by_size = 0;
+  filename_per_symbol = 1;
+
+
+  // Main fuzz entrypoint in nm.c
+  display_file(filename);
+
+  unlink(filename);
+  return 0;
+}
+
+int old_main32 (int argc, char **argv);
+int old_main32 (int argc, char **argv)
 {
   int c;
   int retval;
diff --git a/binutils/objdump.c b/binutils/objdump.c
index 49e944b1dfd..8ef1126f14a 100644
--- a/binutils/objdump.c
+++ b/binutils/objdump.c
@@ -5881,8 +5881,64 @@ display_file (char *filename, char *target, bool last_file)
     bfd_close_all_done (file);
 }
 
-int
-main (int argc, char **argv)
+
+void objdump_reset(void);
+void objdump_reset(void) {
+  process_links = true;
+  do_follow_links = true;
+  dump_section_contents = true;
+  dump_section_headers = true;
+  dump_private_headers = true;
+  dump_ar_hdrs = true;
+  dump_dwarf_section_info = true;
+  // We must call both dwarf_select_sections_by_letters and dwarf_select_sections_all
+  // since dwarf_select_sections_all does not set do_debug_lines |= FLAG_DEBUG_LINES_DECODED;
+  dwarf_select_sections_by_letters("L");
+  dwarf_select_sections_all ();
+  dump_debugging = true;
+
+  dump_stab_section_info = true;
+  disassemble_all = true;
+}
+
+int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size);
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+  char filename[256];
+  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
+  FILE *fp = fopen(filename, "wb");
+  if (!fp) {
+    return 0;
+  }
+  fwrite(data, size, 1, fp);
+  fclose(fp);
+
+  program_name = filename;
+
+  objdump_reset();
+
+  // These flags contain a large set of calls to bfd_fatal (which calls
+  // exit), so to enable fuzzing of objdump with a fuzzer that lives for
+  // a longer period of time (more than 10 seconds) define
+  // OBJDUMP_SAFE
+#ifndef OBJDUMP_SAFE
+  dump_reloc_info = true;
+  // ctf section and reloc are simply too quick to exit and disrupts
+  // fuzzing too much. Will leave this commented out for now.
+  //dump_dynamic_reloc_info = true;
+  //dump_ctf_section_info = true;
+  disassemble = true;
+#endif
+
+  // Main fuzz entrypoint in objdump.c
+  display_file(filename, NULL, true);
+
+  unlink(filename);
+  return 0;
+}
+
+int old_main32 (int argc, char **argv);
+int old_main32 (int argc, char **argv)
 {
   int c;
   char *target = default_target;
diff --git a/binutils/readelf.c b/binutils/readelf.c
index 5e4ad6ea6ad..67e39da555e 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -58,6 +58,7 @@
 #define BFD64
 
 #include "bfd.h"
+#include "libbfd.h"
 #include "bucomm.h"
 #include "elfcomm.h"
 #include "demanguse.h"
@@ -23617,8 +23618,113 @@ db_task_printsym (unsigned int addr)
 }
 #endif
 
-int
-main (int argc, char ** argv)
+int check_architecture(char *tmpfilename, char *arch_string) {
+  bfd_cleanup cleanup = NULL;
+  bfd *file = bfd_openr(tmpfilename, arch_string);
+  if (file == NULL) {
+    remove(tmpfilename);
+    return 0;
+  }
+
+  if (!bfd_read_p(file) ||
+      (unsigned int)file->format >= (unsigned int)bfd_type_end) {
+    bfd_close(file);
+    return 0;
+  }
+
+  bool doAnalysis = false;
+  if (bfd_seek(file, (file_ptr)0, SEEK_SET) == 0) {
+    file->format = bfd_object;
+    cleanup = BFD_SEND_FMT(file, _bfd_check_format, (file));
+    if (cleanup) {
+      doAnalysis = true;
+      cleanup(file);
+    }
+    file->format = bfd_unknown;
+  }
+
+  if (file != NULL) {
+    bfd_close(file);
+  }
+
+  // return 1 if the architecture matches.
+  if (doAnalysis) {
+    return 1;
+  }
+  return 0;
+}
+
+// int gb=0;
+
+int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size);
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  char filename[256];
+  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
+
+  FILE *fp = fopen(filename, "wb");
+  if (!fp)
+    return 0;
+
+    /* Code to quickly extract target list.
+     * This is used to identify new targets but should
+     * not be in the fuzz code.
+    if (gb == 0) {
+      char **doublel = bfd_target_list();
+      while (*doublel != NULL) {
+        printf("Target: %s\n", *doublel);
+        doublel++;
+      }
+      gb=1;
+    }
+    exit(0);
+    */
+
+#ifdef READELF_TARGETED
+  if (check_architecture(filename, READELF_TARGETED) == 0) {
+    unlink(filename);
+    return 0;
+  }
+#endif
+
+  fwrite(data, size, 1, fp);
+  fclose(fp);
+  do_syms = true;
+  do_reloc = true;
+  do_unwind = true;
+  do_dynamic = true;
+  do_header = true;
+  do_sections = true;
+  do_section_groups = true;
+  do_segments = true;
+  do_version = true;
+  do_histogram = true;
+  do_arch = true;
+  do_notes = true;
+
+  // Enable DWARF analysis
+  // We must call both dwarf_select_sections_by_letters and
+  // dwarf_select_sections_all since dwarf_select_sections_all does not set
+  // do_debug_lines |= FLAG_DEBUG_LINES_DECODED;
+  dwarf_select_sections_by_letters("L");
+  dwarf_select_sections_all();
+
+  // Main fuzz entrypoint
+  process_file(filename);
+
+  unlink(filename);
+
+  free(dump_ctf_symtab_name);
+  dump_ctf_symtab_name = NULL;
+  free(dump_ctf_strtab_name);
+  dump_ctf_strtab_name = NULL;
+  free(dump_ctf_parent_name);
+  dump_ctf_parent_name = NULL;
+
+  return 0;
+}
+
+int old_main32 (int argc, char ** argv);
+int old_main32 (int argc, char ** argv)
 {
   int err;
 
diff --git a/binutils/strings.c b/binutils/strings.c
index ec02e1d5fce..41290d5308b 100644
--- a/binutils/strings.c
+++ b/binutils/strings.c
@@ -196,8 +196,8 @@ set_string_min (const char * arg)
      string lengths, even if technically they will work ?  */
 }
 
-int
-main (int argc, char **argv)
+int old_main32 (int argc, char **argv);
+int old_main32 (int argc, char **argv)
 {
   int optc;
   int exit_status = 0;
@@ -1361,3 +1361,24 @@ usage (FILE *stream, int status)
     fprintf (stream, _("Report bugs to %s\n"), REPORT_BUGS_TO);
   exit (status);
 }
+
+int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size);
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+  char filename[256];
+  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
+  FILE *fp = fopen(filename, "wb");
+  if (!fp) {
+    return 0;
+  }
+  fwrite(data, size, 1, fp);
+  fclose(fp);
+
+  program_name = "fuzz_strings";
+
+  // Main fuzz entrypoint in strings.c
+  strings_object_file(filename);
+
+  unlink(filename);
+  return 0;
+}
